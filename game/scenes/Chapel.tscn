[gd_scene load_steps=7 format=2]

[ext_resource path="res://scenes/Chapel.gd" type="Script" id=1]
[ext_resource path="res://resources/assets/buildings/Chapel_2.png" type="Texture" id=2]

[sub_resource type="Shader" id=3]
code = "/**
* Shadow 2D.
* License: CC0
* https://creativecommons.org/publicdomain/zero/1.0/
*/
shader_type canvas_item;
render_mode blend_mix;

uniform vec2 deform = vec2(2.0, 2.0);
uniform vec2 offset = vec2(0.0, 0.0);
uniform vec4 modulate : hint_color;

//uniform vec2 texture_size; //uncomment for GLES2

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;
	vec2 uv = UV;
	float sizex = float(textureSize(TEXTURE,int(ps.x)).x); //comment for GLES2
	float sizey = float(textureSize(TEXTURE,int(ps.y)).y); //comment for GLES2
	//float sizex = texture_size.x; //uncomment for GLES2
	//float sizey = texture_size.y; //uncomment for GLES2
	uv.y+=offset.y*ps.y;
	uv.x+=offset.x*ps.x;
	float decalx=((uv.y-ps.x*sizex)*deform.x);
	float decaly=((uv.y-ps.y*sizey)*deform.y);
	uv.x += decalx;
	uv.y += decaly;
	vec4 shadow = vec4(modulate.rgb, texture(TEXTURE, uv).a * modulate.a);
	vec4 col = texture(TEXTURE, UV);
	COLOR = mix(shadow, col, col.a);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/deform = Vector2( 2, 2 )
shader_param/offset = Vector2( 0, 0 )
shader_param/modulate = null

[sub_resource type="Shader" id=1]
code = "/**
* Shadow 2D.
* License: CC0
* https://creativecommons.org/publicdomain/zero/1.0/
*/
shader_type canvas_item;
render_mode blend_mix;

uniform vec2 deform = vec2(2.0, 2.0);
uniform vec2 offset = vec2(0.0, 0.0);
uniform vec4 modulate : hint_color;

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;
	vec2 uv = UV;
	float sizex = float(textureSize(TEXTURE,int(ps.x)).x); //comment for GLES2
	float sizey = float(textureSize(TEXTURE,int(ps.y)).y); //comment for GLES2
	uv.y+=offset.y*ps.y;
	uv.x+=offset.x*ps.x;
	float decalx=((uv.y-ps.x*sizex)*deform.x);
	float decaly=((uv.y-ps.y*sizey)*deform.y);
	uv.x += decalx;
	uv.y += decaly;
	vec4 shadow = vec4(modulate.rgb, texture(TEXTURE, uv).a * modulate.a);
	vec4 col = texture(TEXTURE, UV);
	COLOR = mix(shadow, col, col.a);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/deform = Vector2( 1, 0.5 )
shader_param/offset = Vector2( 0, 0 )
shader_param/modulate = null

[node name="Chapel" type="StaticBody2D"]
material = SubResource( 4 )
position = Vector2( 1170, -553 )
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionPolygon2D" parent="."]
position = Vector2( -9.92896, 59.5 )
rotation = 0.785398
polygon = PoolVector2Array( 1.01038, -8.78857, -112.834, 25.8597, -77.4785, -88.6916, 36.3657, -120.511 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( -20, -109 )
scale = Vector2( 1.99219, 1.99219 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -100, -100, 314, 323 )
